(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{386:function(e,t,n){"use strict";n.r(t);var r=n(25),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"intersection-obserber-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#intersection-obserber-api"}},[e._v("#")]),e._v(" Intersection Obserber API")]),e._v(" "),n("p",[e._v("异步观察目标元素的可视状态或者两个元素的相对可视状态")]),e._v(" "),n("p",[e._v("使用场景")]),e._v(" "),n("ul",[n("li",[e._v("当页面滚动时，懒加载图片或其他内容")]),e._v(" "),n("li",[e._v("实现“可无限滚动”网站，也就是当用户滚动网页时直接加载更多内容，无需翻页")]),e._v(" "),n("li",[e._v("根据用户是否已滚动到相应区域来灵活开始执行任务或动画")])]),e._v(" "),n("p",[e._v("交集检测通常需要涉及到事件监听，以及对每个目标元素执行"),n("code",[e._v("Element.getBoundingClientRect()")]),e._v(" 方法以获取所需信息。")])])}),[],!1,null,null,null);t.default=s.exports}}]);